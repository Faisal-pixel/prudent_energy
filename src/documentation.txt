# Bug: Figuring out how to add the toggle button in the Create New Bidder form under the service categories, and also updating it in the state.
# Solution: So I installed all fontawesome dependies and imported them. I also increased using tailwind "text". To update the state I gave the icon a data-icon-name attribute and set it to the name it represent in the state. For instance "data-icon-name="insurance". Since their initial value is a boolean and it is set to false, I used that to check for whether the toggle is on or off using ternary operation. The fontawesome icon has two state, faToggleOn and faToggleOff. Then I created a helper function handleToggleOnClick(e, "serviceCategories") which receives the event and then the category in the form. Did this because of the way my state is structured.
  Here is the structure of my state:
    const [createNewBidderFormValues, setCreateNewBidderFormValues] = useState({
        general: {
            bidderNumber: "",
            name: "",
            lastDateModified: "",
            status: ""
        },
        addressAndContact: {
            address1: "",
            address2: "",
            city: "",
            contactPersonName: "",
            phoneNumber: "",
            email: "",
        },
        payment: {
            tinNumber: "",
            paymentTermCode: "",
        },
        serviceCategories: {
            serviceClass: "",
            insurance: false,
            freight: false,
            agency: false,
            storage: false
        }

    });
    Here is the helper function and how it updates the state:
        const handleToggleOnClick = (e, section) => {
        const name = e.currentTarget.getAttribute("data-icon-name");
        setCreateNewBidderFormValues((prevState) => (
            {...prevState, [section]: {...prevState[section], [name]: !prevState.serviceCategories[name]}}
        ))
    }
    So basically, it gets the name of the toggle from the data-icon-name value by using e.currentTarget.getAttribute, and then using setCreateNewBidderFormValues;
    it makes use of the prevState useState hook provides us and then returns an object, spreading the prevState, then using the selection we pass in earlier,
    I use it to select which category I want to update, which is the serviceCategories, and then spread back in the prevState of this category while using the name i got to select which
    key in the serviceCategories I want to update and then set it to always be the opposite vale of the previous state
# Date: [21/08/2023]
# Developer: [Adams Faisal Omokugbo]

# Bug: Figuring out how to implement the expiration date. When I use types in an input value and selects either days/ hours in the select dropdown then it should set the expiration date and print out on the screen.
# Solution: I started by creating states for expirationDate, setExpirationDate(Will be printed to the screen), expiration time and setExpirationTime(Will be printed on the screen too).
Also created an inputValue state and setINputValue state (Will control the value of the input and setInputValue to set the value of the input based on it changing).
also created a selectedValue and setSelectedValue state (will control the value of the select and setSelectedValue to set the value of the select based on it changing)


    const [expirationDate, setExpirationDate] = useState("");
    const [expirationTime, setExpirationTime] = useState("");
    const [inputValue, setInputValue] = useState("");
    const [selectedValue, setSelectedValue] = useState("select");

And then I created a useEffect that depends on the inputValue and the selectedValue to avoid infinite rendering of the date and time, since time keeps changing.
created a variable that stores today's daye and broke it down to currentDay, currentMonth and currentYear.
Created a futureDate variable that stores a date that depends on the currentDate variable and then i setExpirationDate state to the currentDate and the time to the currentTime
Then I create a function that calculates the ExpirationDate by setting the futureDate variable's date to the currentDay + the inputValue and the I set the expirationDate based on the futureDate
Then I created a function that calculates the expirationtime that receives the selectedValue and checks if is hours, if it is hours then it should add the input value to the currentHour and set the Hour of the futureDate
but if it days, then just set the expiration time to the future date time. Finally I check if the inputValue isnt empty and then it calls the two functions.
    useEffect(() => {
        const currentDate = new Date();
        const currentDay = currentDate.getDate();
        const currentMonth = currentDate.getMonth();
        const currentYear = currentDate.getFullYear();
        const currentHour = currentDate.getHours();

        const futureDate = new Date(currentDate)

        
        setExpirationDate(`${currentDate.getDate()}/${currentDate.getMonth()}/${currentDate.getFullYear()}`)

        const calculateExpirationDate = (optionSelected) => {
            if (optionSelected === "days") {
                futureDate.setDate(currentDay + parseInt(inputValue))
                setExpirationDate(`${futureDate.getDate()}/${futureDate.getMonth()}/${futureDate.getFullYear()}`)
            } else if(optionSelected === "hours") {
                setExpirationDate(`${futureDate.getDate()}/${futureDate.getMonth()}/${futureDate.getFullYear()}`)
            }
        }
        const calculateExpirationTime = (optionSelected) => {
            if(optionSelected === "hours") {
                futureDate.setHours(currentHour + parseInt(inputValue))
                setExpirationTime(`${futureDate.getHours()}:${futureDate.getMinutes()}:${futureDate.getSeconds()} GMT+1`)
            } else if(optionSelected === "days") {
                setExpirationTime(`${futureDate.getHours()}:${futureDate.getMinutes()}:${futureDate.getSeconds()} GMT+1`)
            }
        }
        if(inputValue !== "") {
            calculateExpirationDate(selectedValue);
            const interval = setInterval(() => {
                calculateExpirationTime(selectedValue);
            }, 1)
            
            return () => {
                clearInterval(interval);
            }
            
            // countDown = new Date(`${countDownYear}`)
        }
    }, [ inputValue, selectedValue])
# Date: [23/08/2023]
# Developer: [Adams Faisal Omokugbo]